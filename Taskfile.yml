version: '3'

tasks:
  setup:
    desc: Run this to spin up your application for the first time quickly
    cmds:
      - source .env
      - task create_state_bucket
      - task deploy -- docker
      - task docker_push
      - task deploy -- persistence
      - task deploy -- data
      - task deploy -- service

  teardown:
    desc: Run this to tear down your application in order of silo dependency
    cmds:
      - task destroy -- service
      - task destroy -- data
      - task destroy -- docker
      - task destroy -- persistence
  create_state_bucket:
    desc: Create a state bucket for the docker stack. Make sure the .env.template file is filled out first
    cmds:
      - aws s3api create-bucket --bucket $TF_VAR_STATE_BUCKET --region $AWS_DEFAULT_REGION
  
  deploy:
    desc: Deploy any stack using a CLI argument after "--" - as in `task deploy -- persistence`
    cmds:
      - terraform -chdir="_infrastructure/stacks/terraform/{{.CLI_ARGS}}" init -backend-config="bucket=$TF_VAR_STATE_BUCKET" -backend-config="key={{.CLI_ARGS}}.tfstate" -backend-config="region=$AWS_DEFAULT_REGION"
      - terraform -chdir="_infrastructure/stacks/terraform/{{.CLI_ARGS}}" apply -var-file=../../../_env/staging/{{.CLI_ARGS}}.tfvars

  destroy:
    desc: Destroy any stack using a CLI argument after "--" - as in `task deploy -- persistence`
    cmds:
      - terraform -chdir="_infrastructure/stacks/terraform/{{.CLI_ARGS}}" init -migrate-state -backend-config="bucket=$TF_VAR_STATE_BUCKET" -backend-config="key={{.CLI_ARGS}}.tfstate" -backend-config="region=$AWS_DEFAULT_REGION"
      - terraform -chdir="_infrastructure/stacks/terraform/{{.CLI_ARGS}}" destroy -var-file=../../../_env/staging/{{.CLI_ARGS}}.tfvars

  output:
    desc: Print outputs for any stack
    cmds:
      - terraform -chdir="_infrastructure/stacks/terraform/{{.CLI_ARGS}}" output
  
  console:
    desc: Use the console for any stack by using a CLI argument after "--" - as in `task console -- persistence`
    cmds:
      - terraform -chdir="_infrastructure/stacks/terraform/{{.CLI_ARGS}}" console -var-file=../../../_env/staging/{{.CLI_ARGS}}.tfvars

  docker_build:
    desc: Build the docker image locally
    cmds:
      - docker build -t eth-consumer -f _infrastructure/stacks/docker/Dockerfile .
  docker_run:
    desc: Run the docker image locally. Copy docker.env.template to a file called docker.env and fill it out before running this.
    cmds:
      - docker run -d --env-file docker.env eth-consumer
  docker_logs:
    desc: View the docker logs for the local consumer container
    cmds:
      - docker logs -f $(docker ps | grep consumer | awk '{print $1}')
  docker_push:
    desc: Build and push the docker image to the ECR repo. Make sure the docker stack is deloyed before using this.
    cmds:
      - aws ecr get-login-password | docker login --username AWS --password-stdin $(terraform -chdir="_infrastructure/stacks/terraform/docker" output -raw ecr_uri)
      - task docker_build
      - docker tag eth-consumer:latest $(terraform -chdir="_infrastructure/stacks/terraform/docker" output -raw ecr_uri):latest
      - docker push $(terraform -chdir="_infrastructure/stacks/terraform/docker" output -raw ecr_uri):latest

  node_ssh:
    desc: SSH into the Ethereum Node created in the data stack
    cmds:
      - ssh ec2-user@$(terraform -chdir="_infrastructure/stacks/terraform/data" output -raw node_ip)